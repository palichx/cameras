import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { API } from '../App';
import { Card } from '../components/ui/card';
import { Button } from '../components/ui/button';
import { Input } from '../components/ui/input';
import { Label } from '../components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../components/ui/select';
import { Switch } from '../components/ui/switch';
import { toast } from 'sonner';
import { Settings as SettingsIcon, Save, Send } from 'lucide-react';

const Settings = () => {
  const [settings, setSettings] = useState(null);
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);

  useEffect(() => {
    fetchSettings();
  }, []);

  const fetchSettings = async () => {
    try {
      const response = await axios.get(`${API}/settings`);
      setSettings(response.data);
    } catch (error) {
      console.error('Error fetching settings:', error);
      toast.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫');
    } finally {
      setLoading(false);
    }
  };

  const handleSave = async () => {
    try {
      setSaving(true);
      await axios.put(`${API}/settings`, settings);
      toast.success('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
    } catch (error) {
      console.error('Error saving settings:', error);
      toast.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫');
    } finally {
      setSaving(false);
    }
  };

  const handleTestTelegram = async () => {
    try {
      const response = await axios.post(`${API}/settings/test-telegram`);
      if (response.data.success) {
        toast.success('–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');
      } else {
        toast.error(response.data.message);
      }
    } catch (error) {
      console.error('Error testing Telegram:', error);
      toast.error(error.response?.data?.detail || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏');
    }
  };

  const updateFFmpegSetting = (key, value) => {
    setSettings({
      ...settings,
      ffmpeg: {
        ...settings.ffmpeg,
        [key]: value
      }
    });
  };

  const updateTelegramSetting = (key, value) => {
    setSettings({
      ...settings,
      telegram: {
        ...settings.telegram,
        [key]: value
      }
    });
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center h-screen">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-slate-600">–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="p-6 max-w-5xl mx-auto" data-testid="settings-page">
      <div className="flex items-center justify-between mb-6">
        <div className="flex items-center space-x-3">
          <SettingsIcon className="w-8 h-8 text-blue-600" />
          <h1 className="text-3xl font-bold text-slate-800">–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã</h1>
        </div>
        <Button
          onClick={handleSave}
          disabled={saving}
          data-testid="save-settings-button"
          className="bg-blue-600 hover:bg-blue-700"
        >
          <Save className="w-4 h-4 mr-2" />
          {saving ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}
        </Button>
      </div>

      {/* FFmpeg Settings */}
      <Card className="p-6 mb-6">
        <h2 className="text-xl font-semibold mb-4 flex items-center">
          üé¨ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ FFmpeg
        </h2>
        
        <div className="space-y-4">
          <div className="flex items-center justify-between">
            <div>
              <Label>–í–∫–ª—é—á–∏—Ç—å H.264 –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é</Label>
              <p className="text-sm text-slate-500">
                –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
              </p>
            </div>
            <Switch
              checked={settings.ffmpeg.enabled}
              onCheckedChange={(checked) => updateFFmpegSetting('enabled', checked)}
              data-testid="ffmpeg-enabled-switch"
            />
          </div>

          {settings.ffmpeg.enabled && (
            <>
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="preset">Preset (—Å–∫–æ—Ä–æ—Å—Ç—å –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è)</Label>
                  <Select
                    value={settings.ffmpeg.preset}
                    onValueChange={(value) => updateFFmpegSetting('preset', value)}
                  >
                    <SelectTrigger id="preset" data-testid="preset-select">
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="ultrafast">ultrafast (—Å–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π, 10x)</SelectItem>
                      <SelectItem value="superfast">superfast (–æ—á–µ–Ω—å –±—ã—Å—Ç—Ä—ã–π, 6x)</SelectItem>
                      <SelectItem value="veryfast">veryfast (–±—ã—Å—Ç—Ä—ã–π, 4x)</SelectItem>
                      <SelectItem value="faster">faster (–±—ã—Å—Ç—Ä–µ–µ, 3x)</SelectItem>
                      <SelectItem value="fast">fast (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π, 2x)</SelectItem>
                      <SelectItem value="medium">medium (–º–µ–¥–ª–µ–Ω–Ω—ã–π, 1x)</SelectItem>
                    </SelectContent>
                  </Select>
                  <p className="text-xs text-slate-500 mt-1">
                    –ë—ã—Å—Ç—Ä–µ–µ = –º–µ–Ω—å—à–µ CPU, –Ω–æ –±–æ–ª—å—à–µ —Ñ–∞–π–ª
                  </p>
                </div>

                <div>
                  <Label htmlFor="crf">CRF (–∫–∞—á–µ—Å—Ç–≤–æ)</Label>
                  <Select
                    value={settings.ffmpeg.crf.toString()}
                    onValueChange={(value) => updateFFmpegSetting('crf', parseInt(value))}
                  >
                    <SelectTrigger id="crf" data-testid="crf-select">
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="18">18 (–æ—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ)</SelectItem>
                      <SelectItem value="23">23 (–≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ)</SelectItem>
                      <SelectItem value="28">28 (—Ö–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ)</SelectItem>
                      <SelectItem value="30">30 (—Å—Ä–µ–¥–Ω–µ–µ, –¥–ª—è surveillance)</SelectItem>
                      <SelectItem value="32">32 (–Ω–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ)</SelectItem>
                      <SelectItem value="35">35 (–æ—á–µ–Ω—å –Ω–∏–∑–∫–æ–µ)</SelectItem>
                    </SelectContent>
                  </Select>
                  <p className="text-xs text-slate-500 mt-1">
                    –ú–µ–Ω—å—à–µ = –ª—É—á—à–µ –∫–∞—á–µ—Å—Ç–≤–æ, –Ω–æ –±–æ–ª—å—à–µ —Ñ–∞–π–ª
                  </p>
                </div>
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="resolution">–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ</Label>
                  <Select
                    value={settings.ffmpeg.max_resolution}
                    onValueChange={(value) => updateFFmpegSetting('max_resolution', value)}
                  >
                    <SelectTrigger id="resolution" data-testid="resolution-select">
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="480p">480p (854√ó480)</SelectItem>
                      <SelectItem value="720p">720p (1280√ó720, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)</SelectItem>
                      <SelectItem value="1080p">1080p (1920√ó1080)</SelectItem>
                      <SelectItem value="original">–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div>
                  <Label htmlFor="fps">–¶–µ–ª–µ–≤–æ–π FPS</Label>
                  <Select
                    value={settings.ffmpeg.target_fps.toString()}
                    onValueChange={(value) => updateFFmpegSetting('target_fps', parseInt(value))}
                  >
                    <SelectTrigger id="fps" data-testid="fps-select">
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="10">10 fps (—ç–∫–æ–Ω–æ–º–∏—è CPU)</SelectItem>
                      <SelectItem value="15">15 fps (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)</SelectItem>
                      <SelectItem value="20">20 fps (–ø–ª–∞–≤–Ω–æ–µ –≤–∏–¥–µ–æ)</SelectItem>
                      <SelectItem value="30">30 fps (–≤—ã—Å–æ–∫–∞—è –ø–ª–∞–≤–Ω–æ—Å—Ç—å)</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="audio-bitrate">Audio Bitrate</Label>
                  <Select
                    value={settings.ffmpeg.audio_bitrate}
                    onValueChange={(value) => updateFFmpegSetting('audio_bitrate', value)}
                  >
                    <SelectTrigger id="audio-bitrate" data-testid="audio-bitrate-select">
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="32k">32 kbps (–Ω–∏–∑–∫–æ–µ)</SelectItem>
                      <SelectItem value="64k">64 kbps (—Å—Ä–µ–¥–Ω–µ–µ)</SelectItem>
                      <SelectItem value="128k">128 kbps (–≤—ã—Å–æ–∫–æ–µ)</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div>
                  <Label htmlFor="threads">CPU Threads</Label>
                  <Select
                    value={settings.ffmpeg.threads.toString()}
                    onValueChange={(value) => updateFFmpegSetting('threads', parseInt(value))}
                  >
                    <SelectTrigger id="threads" data-testid="threads-select">
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="1">1 thread (–º–∏–Ω–∏–º—É–º CPU)</SelectItem>
                      <SelectItem value="2">2 threads (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)</SelectItem>
                      <SelectItem value="4">4 threads (–±—ã—Å—Ç—Ä–µ–µ)</SelectItem>
                      <SelectItem value="0">auto (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
            </>
          )}
        </div>
      </Card>

      {/* Telegram Settings */}
      <Card className="p-6">
        <h2 className="text-xl font-semibold mb-4 flex items-center">
          üì± –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram
        </h2>
        
        <div className="space-y-4">
          <div className="flex items-center justify-between">
            <div>
              <Label>–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è Telegram</Label>
              <p className="text-sm text-slate-500">
                –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–æ–±—ã—Ç–∏—è—Ö –≤ Telegram
              </p>
            </div>
            <Switch
              checked={settings.telegram.enabled}
              onCheckedChange={(checked) => updateTelegramSetting('enabled', checked)}
              data-testid="telegram-enabled-switch"
            />
          </div>

          {settings.telegram.enabled && (
            <>
              <div>
                <Label htmlFor="bot-token">Bot Token</Label>
                <Input
                  id="bot-token"
                  type="text"
                  value={settings.telegram.bot_token || ''}
                  onChange={(e) => updateTelegramSetting('bot_token', e.target.value)}
                  placeholder="123456789:ABCdefGHIjklMNOpqrsTUVwxyz"
                  data-testid="bot-token-input"
                />
                <p className="text-xs text-slate-500 mt-1">
                  –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω —É <a href="https://t.me/BotFather" target="_blank" rel="noopener noreferrer" className="text-blue-600">@BotFather</a>
                </p>
              </div>

              <div>
                <Label htmlFor="chat-id">Chat ID</Label>
                <Input
                  id="chat-id"
                  type="text"
                  value={settings.telegram.chat_id || ''}
                  onChange={(e) => updateTelegramSetting('chat_id', e.target.value)}
                  placeholder="-1001234567890"
                  data-testid="chat-id-input"
                />
                <p className="text-xs text-slate-500 mt-1">
                  –ü–æ–ª—É—á–∏—Ç–µ ID —É <a href="https://t.me/userinfobot" target="_blank" rel="noopener noreferrer" className="text-blue-600">@userinfobot</a>
                </p>
              </div>

              <div className="flex items-center justify-between">
                <Label>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–≤–∏–∂–µ–Ω–∏–∏</Label>
                <Switch
                  checked={settings.telegram.send_motion_alerts}
                  onCheckedChange={(checked) => updateTelegramSetting('send_motion_alerts', checked)}
                  data-testid="motion-alerts-switch"
                />
              </div>

              <div className="flex items-center justify-between">
                <Label>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö</Label>
                <Switch
                  checked={settings.telegram.send_error_alerts}
                  onCheckedChange={(checked) => updateTelegramSetting('send_error_alerts', checked)}
                  data-testid="error-alerts-switch"
                />
              </div>

              <Button
                onClick={handleTestTelegram}
                variant="outline"
                data-testid="test-telegram-button"
                className="w-full"
              >
                <Send className="w-4 h-4 mr-2" />
                –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
              </Button>
            </>
          )}
        </div>
      </Card>
    </div>
  );
};

export default Settings;
